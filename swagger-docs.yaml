basePath: /
consumes:
- application/json
definitions:
  Product:
    properties:
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      price:
        format: float
        type: number
        x-go-name: Price
      sku:
        type: string
        x-go-name: SKU
    title: Product defines the structure of a product in our API.
    type: object
    x-go-package: github.com/null-char/go-coffee/data
info:
  contact:
    email: skp.frl@gmail.com
    name: null-char
    url: https://nullchar.now.sh
  description: |-
    The products APIs allows consumers to get a list of products (mostly just coffee), add to
    them and update / delete a certain product.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: Products API
  version: 1.0.0
paths:
  /products:
    get:
      description: |-
        You can currently only get all of the products by default.
        Getting by id is not supported yet.
      operationId: listProducts
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/productsListResponse'
      schemes:
      - http
      summary: Lists all products currently in the data store.
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Once the product is added, you'll get a response of 201 with the newly created product.
      operationId: addProduct
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/productsListResponse'
      schemes:
      - http
      summary: Adds a product to the data store.
      tags:
      - products
  /products/{id}:
    delete:
      description: |-
        The server will respond with a status of 204 if the delete was sucessful.
        If there exists no such product with the given id, the server will respond with a 404.
      operationId: deleteProduct
      parameters:
      - description: The ID of the product.
        format: int64
        in: path
        minimum: 0
        name: id
        required: true
        type: integer
        uniqueItems: true
        x-go-name: ID
      responses:
        "204": {}
        "404": {}
      schemes:
      - http
      summary: Deletes a product with the specified ID from the data store.
      tags:
      - products
    put:
      consumes:
      - application/json
      description: |-
        The server will respond with a status of 200 if the product was successfully updated.
        If there exists no such product with the given id, the server will respond with a 404.
      operationId: updateProduct
      parameters:
      - description: The ID of the product.
        format: int64
        in: path
        minimum: 0
        name: id
        required: true
        type: integer
        uniqueItems: true
        x-go-name: ID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/productResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "404": {}
      schemes:
      - http
      summary: Updates a product with the specified ID.
      tags:
      - products
produces:
- application/json
responses:
  errorResponse:
    description: |-
      errorResponse is what the server will respond with in case it's met with validation
      errors or any other generic error.
    schema:
      properties:
        error:
          type: string
          x-go-name: Error
      required:
      - error
      type: object
  productResponse:
    description: productResponse describes the response for operations such as POST, GET and PUT for /products
    schema:
      $ref: '#/definitions/Product'
  productsListResponse:
    description: productsListResponse contains a body with a list of products from the data store for GET /products
    schema:
      items:
        $ref: '#/definitions/Product'
      type: array
schemes:
- http
swagger: "2.0"
